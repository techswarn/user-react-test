// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin bem_el($element) {
	&_#{$element} {
    @content;
  }
}
@mixin bem_mod($modifier) {
  &-#{$modifier} {
    @content;
  }
}

// Media queries

@mixin mq($break) {
  @if $break == "xs" {
    @media (max-width: $bp-xsmall) {
      @content;
    }
  }
	@else if $break == "sm" {
		@media (min-width: $bp-small) {
			@content;
		}
	}
	@else if $break == "med" {
		@media (min-width: $bp-medium) {
			@content;
		}
	}
  @else if $break == "lrg" {
    @media (min-width: $bp-large) {
      @content;
    }
  }
	@else if $break == "xl" {
		@media (min-width: $bp-xlarge) {
			@content;
		}
	}
   @else {
   	@error "Whoops! No value could be retrieved for `#{$break}`. "
  }
}


// Generate modifier color classes

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;
		}
	}
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" {
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
	}
	@else {
    @error "`#{$el}` is not a valid pseudo-element.";
	}
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

// Adjacent sibling margins

@mixin doubly($margin: 1em) {
	& + & {
	  margin-left: $margin;
    @content;
	}
}

// Grid Columns

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}
